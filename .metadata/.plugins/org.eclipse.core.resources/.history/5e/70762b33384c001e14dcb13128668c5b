package s15.Multithreading.Synchronization.Interrupt;

public class App {

	static public int balance = 0;
	public void withdraw(int amount) {
		synchronized(this){
			if(balance <= 0) {
				try {
					System.out.println("Waiting for balance");
					wait(6000);
					balance = balance - amount;
					System.out.println(amount + " Withdrawn Succesfully");
				} catch (InterruptedException e) {
					System.out.println("Thread was interrupted");
					return;
				}
				
			}
			System.out.println("Your current balance is: " + balance);
		}
	}
	
	public static void main(String[] args) {
		App app = new App();
	
		//for anonymous threads we cannot interrupt it since we dont have a reference
		//for the thread
		Thread withdrawThread = new Thread(new Runnable() {	
			@Override
			public void run() {
				app.withdraw(1000);
			}
		});
		withdrawThread.setName("Withdraw Thread");
		withdrawThread.start();
		if(balance <= 0) {
			try {
				Thread.sleep(5000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			withdrawThread.interrupt(); //if the balance is insufficient create an interrupt
		}

	}
}

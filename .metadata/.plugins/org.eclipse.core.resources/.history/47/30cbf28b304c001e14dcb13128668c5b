package s15.Multithreading.Synchronization.WaitAndNotify;

//using wait and notify keywords to control threading
public class App {

	static public int balance = 0;
	
	//simple withdraw and deposit methods for our wait and notify operations
	public void withdraw(int amount) {
		if(balance <= 0) {
			try {
				System.out.println("Waiting for balance");
				//sets the current thread to waiting which stops it until a notify occurs
				wait();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			
		}
		balance = balance - amount;
	}
	
	public void deposit(int amount) {
		System.out.println("We are depositing the amount");
		balance = balance + amount;
	}
	
	public static void main(String[] args) {
		App app = new App();
		
		Thread withdrawThread = new Thread(new Runnable() {	
			@Override
			public void run() {
				app.withdraw(1000);
			}
		});
		withdrawThread.start();
		
		Thread depThread = new Thread(new Runnable() {	
			@Override
			public void run() {
				try {
					Thread.sleep(5000);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				app.deposit(2000);
			}
		});
		depThread.start();
	}
}
